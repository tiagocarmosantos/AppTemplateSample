'use strict';

(function () {

	'use strict';

	angular.module('ListaTelefonica', ['ngRoute', 'ngSanitize', 'ngComponents']);

	if ('serviceWorker' in navigator) {
		navigator.serviceWorker.register('./service-worker.js').then(function () {
			console.log('[ServiceWorker] Registered');
		});
	}
})();
"use strict";

(function () {

	'use strict';

	// Factories are similars with Service and Providers.

	angular.module("ListaTelefonica").factory("contatosAPI", ['$http', 'config', contatosAPI]);

	function contatosAPI($http, config) {

		var _getContatos = function _getContatos(scope) {
			return $http.get(config.oapiUrl + "/contatos").then(function (data) {
				scope.contatos = JSON.parse(JSON.stringify(data.data));
			}).catch(function (response) {
				scope.error = "Aconteceu um problema: Não foi possível carregar os dados!";
			});
		};

		var _getContatosInScope = function _getContatosInScope() {
			return $http.get(config.oapiUrl + "/contatos").then(function (data) {
				return JSON.parse(JSON.stringify(data.data));
			}).catch(function (response) {
				return [];
			});
		};

		var _getContato = function _getContato(id) {
			return $http.get(config.oapiUrl + "/contatos/" + id).then(function (data) {
				return JSON.parse(JSON.stringify(data.data));
			}).catch(function (response) {
				return "Aconteceu um problema: Não foi possível carregar os dados!";
			});
		};

		var _saveContato = function _saveContato(scope, contato) {
			$http.post(config.oapiUrl + "/contatos", contato).then(function (data) {
				delete scope.contato;
				scope.contatoForm.$setPristine();
				scope.contatos.push(JSON.parse(JSON.stringify(data.data)));
			}).catch(function (response) {
				scope.error = "Aconteceu um problema: Não foi possível salvar o contato!";
			});
		};

		var _deleteContato = function _deleteContato(scope, contato) {
			$http.delete(config.oapiUrl + "/contatos/" + contato.id).then(function (data) {
				scope.contatos.splice(scope.contatos.indexOf(contato), 1);
			}).catch(function (response) {
				scope.error = "Aconteceu um problema: Não foi possível deletar o contato!";
			});
		};

		return {
			getContatos: _getContatos,
			getContatosInScope: _getContatosInScope,
			getContato: _getContato,
			saveContato: _saveContato,
			deleteContato: _deleteContato
		};
	}
})();
"use strict";

(function () {

	'use strict';

	angular.module("ListaTelefonica").controller("DetalhesContatoController", ['$scope', '$routeParams', 'contatosAPI', DetalhesContatoController]);

	function DetalhesContatoController($scope, $routeParams, contatosAPI) {

		console.log('here');

		$scope.contato = [];

		console.log($routeParams);

		contatosAPI.getContato($routeParams.id).then(function (contato) {
			$scope.contato = contato;
		});
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("ListaTelefonicaController", ['$scope', '$timeout', 'contatosAPI', 'serialGenerator', ListaTelefonicaController]);

    function ListaTelefonicaController($scope, $timeout, contatosAPI, serialGenerator) {

        $scope.app = "Lista Telefônica";
        $scope.contatos = [];

        contatosAPI.getContatosInScope().then(function (contatos) {
            $scope.contatos = contatos;

            $scope.contatosNgTable = {
                data: 'contatos',
                class: 'table table-hover table-striped table-bordered table-condensed table-list table-stroke',
                search: 'pesquisarDados',
                select: 'selecionado',
                visualisable: 'visualizavel',
                editable: 'editavel',
                deletable: 'deletavel',
                columnDefs: [{
                    field: 'serial',
                    displayName: 'Serial',
                    hide: 'phone,tablet',
                    sort: true,
                    width: "10%",
                    priority: 4
                }, {
                    field: 'nome',
                    displayName: 'Nome',
                    sort: true,
                    width: "50%",
                    filter: 'capitalize',
                    priority: 1
                }, {
                    field: 'telefone',
                    displayName: 'Telefone',
                    hide: 'phone,tablet',
                    sort: true,
                    width: '20%',
                    priority: 3
                }, {
                    field: 'data',
                    displayName: 'Data',
                    sort: true,
                    width: '20%',
                    filter: 'date',
                    hide: 'phone',
                    priority: 2
                }],
                pager: { enable: true, startPage: 1, limitPerPage: 2, sizes: [2, 5, 8, 10], type: 'local', class: 'pager' },
                rowSelectClick: function rowSelectClick(e, row) {
                    console.log('Fui Clicado!');
                    return true;
                },
                rowDeleteClick: function rowDeleteClick(e, row) {
                    event.preventDefault();
                    console.log('Fui Clicado!');
                    return false;
                },
                rowEditClick: function rowEditClick(e, row) {
                    event.preventDefault();
                    console.log('Fui Clicado!');
                    return false;
                },
                rowViewClick: function rowViewClick(e, row) {
                    event.preventDefault();
                    console.log('Fui Clicado!');
                    return false;
                },
                pagerReloadClick: function pagerReloadClick(e, pagerConfig) {
                    console.log('Fui Atualizado!');
                }
            };
        });

        var init = function init() {
            calcularImpostos($scope.contatos);
        };

        var calcularImpostos = function calcularImpostos(contatos) {
            contatos.forEach(function (contato) {
                contato.operadora.precoComImposto = calcularImposto(contato.operadora.preco);
            });
        };

        var carregarContatos = function carregarContatos() {
            contatosAPI.getContatos($scope);
        };

        $scope.apagarContatos = function (contatos) {
            contatos.forEach(function (contato) {
                if (contato.selecionado) contatosAPI.deleteContato($scope, contato);
            });
        };

        $scope.verificarContatoSelecionado = function (contatos) {
            $scope.hasContatoSelecionado = contatos.some(function (contato) {
                return contato.selecionado;
            });
        };

        $scope.ordernarPor = function (campo) {
            $scope.ordenarContato = campo;
            $scope.direcaoOrdenacao = !$scope.direcaoOrdenacao;
        };

        var calcularImposto = function calcularImposto(preco) {
            var imposto = 1.2;
            return preco * imposto;
        };

        (function initController() {
            init();
            //carregarContatos();

            //$timeout(function () { $('table').trigger('footable_redraw'); }, 0);
            $timeout(function () {
                $('.footable').footable();
            }, 0);
        })();
    }
})();
"use strict";

(function () {

	'use strict';

	angular.module("ListaTelefonica").controller("NovoContatoController", ['$scope', 'contatosAPI', 'serialGenerator', '$location', 'operadorasAPI', NovoContatoController]);

	function NovoContatoController($scope, contatosAPI, serialGenerator, $location, operadorasAPI) {

		$scope.operadoras = [];

		operadorasAPI.getOperadoras().then(function (operadoras) {
			$scope.operadoras = operadoras;
		});

		$scope.adicionarContato = function (contato) {
			contato.serial = serialGenerator.generate();
			contato.data = new Date();
			contatosAPI.saveContato($scope, contato);
			$location.path("/contatos");
		};
	}
})();
"use strict";

(function () {

	'use strict';

	// Services are similars with Factories and Providers.

	angular.module("ListaTelefonica").service("operadorasAPI", ['$http', 'config', operadorasAPI]);

	function operadorasAPI($http, config) {

		this.getOperadoras = function () {
			return $http.get(config.oapiUrl + "/operadoras").then(function (data) {
				return JSON.parse(JSON.stringify(data.data));
			});
		};
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("MemeMakerController", ['$scope', '$timeout', MemeMakerController]);

    function MemeMakerController($scope, $timeout) {

        var init = function init() {
            window.topLineText = "";
            window.bottomLineText = "";
            document.getElementById('topLineText').addEventListener('input', textChangeListener, false);
            document.getElementById('bottomLineText').addEventListener('input', textChangeListener, false);
            document.getElementById('file').addEventListener('change', handleFileSelect, false);
            document.getElementById('saveBtn').addEventListener('click', saveFile, false);
            document.getElementById('inverterBtn').addEventListener('click', InverterImage, false);
            document.getElementById('striperBtn').addEventListener('click', StriperImage, false);
            document.getElementById('grayscalerBtn').addEventListener('click', GrayscalerImage, false);
        };

        var redrawMeme = function redrawMeme(image, topLine, bottomLine) {
            // Get Canvas2DContext
            var canvas = document.querySelector('canvas');
            var ctx = canvas.getContext("2d");
            // Your code here
            ctx.drawImage(image, 0, 0, canvas.width, canvas.height);

            ctx.font = "36px Impact";
            ctx.fillStyle = "white";
            ctx.strokeStyle = "black";
            ctx.lineWidth = 1;
            ctx.textAlign = "center";

            if (topLine != null) {
                ctx.fillText(topLine, canvas.width / 2, 40);
                ctx.strokeText(topLine, canvas.width / 2, 40);
            }

            if (topLine != null) {
                ctx.fillText(bottomLine, canvas.width / 2, 470);
                ctx.strokeText(bottomLine, canvas.width / 2, 470);
            }
        };

        var textChangeListener = function textChangeListener(evt) {
            var id = evt.target.id;
            var text = evt.target.value;

            if (id == "topLineText") {
                window.topLineText = text;
            } else {
                window.bottomLineText = text;
            }

            redrawMeme(window.imageSrc, window.topLineText, window.bottomLineText);
        };

        var saveFile = function saveFile() {
            var urlData = document.querySelector('canvas').toDataURL().replace("image/png", "image/octet-stream");

            var linkHTML = document.createElement("a");
            linkHTML.setAttribute("href", urlData);
            linkHTML.setAttribute("download", "MemeMaked.jpg");
            linkHTML.click();
        };

        var inverterColor = function inverterColor(ctxCanvas, imageData) {
            for (var i = 0; i < imageData.data.length; i += 4) {
                imageData.data[i] = 255 - imageData.data[i];
                imageData.data[i + 1] = 255 - imageData.data[i + 1];
                imageData.data[i + 2] = 255 - imageData.data[i + 2];
                imageData.data[i + 3] = 255;
            }
            ctxCanvas.putImageData(imageData, 0, 0);
        };

        var handleFileSelect = function handleFileSelect(evt) {
            var canvasWidth = 500;
            var canvasHeight = 500;
            var file = evt.target.files[0];

            var reader = new FileReader();
            reader.onload = function (fileObject) {
                var data = fileObject.target.result;

                // Create an image object
                var image = new Image();
                image.onload = function () {

                    window.imageSrc = this;
                    redrawMeme(window.imageSrc, null, null);
                };

                // Set image data to background image.
                image.src = data;
                //console.log(fileObject.target.result);
            };
            reader.readAsDataURL(file);
        };

        var painterGreen = function painterGreen(ctxCanvas, imageData) {
            var numPixels = imageData.data.length / 4;
            for (var i = 0; i < numPixels; i++) {
                if (i % 10 === 0) {
                    imageData.data[i * 4 + 1] = 255;
                    imageData.data[i * 4 + 3] = 255;
                }
            }
            ctxCanvas.putImageData(imageData, 0, 0);
        };

        var painterGrayscale = function painterGrayscale(ctxCanvas, imageData) {
            for (var i = 0; i < imageData.data.length; i += 4) {
                // Method #01 - Average
                //var grayScale = ((imageData.data[i] + imageData.data[i+1] + imageData.data[i+2]) / 3);

                // Method #02 - Average
                //var grayScale = (imageData.data[i] * 0.299 + imageData.data[i+1] * 0.587 + imageData.data[i+2] * 0.114);

                // Method #03 - Desaturation
                //var grayScale = (Math.max(imageData.data[i], imageData.data[i+1], imageData.data[i+2]) + Math.min(imageData.data[i], imageData.data[i+1], imageData.data[i+2]) / 2);

                // Method #04.1 - Maximum Composition
                //var grayScale = Math.max(imageData.data[i], imageData.data[i+1], imageData.data[i+2]);

                // Method #04.2 - Mainimum Composition
                //var grayScale = Math.min(imageData.data[i], imageData.data[i+1], imageData.data[i+2]);

                // Method #05 - Single Channel
                var grayScale = imageData.data[i];

                imageData.data[i] = grayScale;
                imageData.data[i + 1] = grayScale;
                imageData.data[i + 2] = grayScale;
                imageData.data[i + 3] = 255;
            }
            ctxCanvas.putImageData(imageData, 0, 0);
        };

        function InverterImage() {
            // Get Canvas2DContext
            var canvas = document.querySelector('canvas');
            var ctx = canvas.getContext("2d");
            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            inverterColor(ctx, imageData);
        }

        function StriperImage() {
            // Get Canvas2DContext
            var canvas = document.querySelector('canvas');
            var ctx = canvas.getContext("2d");
            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            painterGreen(ctx, imageData);
        }

        function GrayscalerImage() {
            // Get Canvas2DContext
            var canvas = document.querySelector('canvas');
            var ctx = canvas.getContext("2d");
            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            painterGrayscale(ctx, imageData);
        }

        (function initController() {
            init();
        })();
    }
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("NgMapController", ['$rootScope', '$scope', '$window', '$element', NgMap]);

    function NgMap($rootScope, $scope, $window, $element) {

        var vm = this;

        function initMap() {
            var mapElem = $element[0];

            navigator.geolocation.getCurrentPosition(function (position) {
                var map = new google.maps.Map(mapElem, {
                    center: { lat: position.coords.latitude, lng: position.coords.longitude },
                    zoom: 8
                });
            });
        };

        (function initController() {
            initMap();
        })();
    }
})();
"use strict";

(function () {

        'use strict';

        angular.module("ListaTelefonica").controller("listPicMeController", ['picMeAPI', '$rootScope', '$scope', '$window', listPicMeController]);

        function listPicMeController(picMeAPI, $rootScope, $scope, $window) {

                var vm = this;
                vm.picsMe = [{ image: { content: '' } }, { image: { content: '' } }, { image: { content: '' } }, { image: { content: '' } }, { image: { content: '' } }, { image: { content: '' } }, { image: { content: '' } }];

                vm.listPicMe = function () {
                        picMeAPI.getPicsMe().then(function (data) {
                                vm.picsMe = data;
                        }).catch(function (error) {
                                console.log(error);
                        });
                };

                vm.qrCodePicMe = function () {
                        console.log('qrCodePicMe');
                        var canvas = document.querySelector("#picMeQRCode");
                        var urlNewPicMe = "" + window.location.origin + vm.routeNewPicMe;

                        QRCode.toCanvas(canvas, urlNewPicMe);
                        vm.showQRCode = !vm.showQRCode;
                };

                (function initController() {
                        $rootScope.showHeader = true;
                        $rootScope.showFooter = false;
                        vm.routeNewPicMe = '#!/picMe/newPicMe';
                        vm.showQRCode = false;
                        vm.listPicMe();
                })();

                // Clean up stuff
                $scope.$on('$destroy', function () {});

                // Here your view content is fully loaded !!
                $scope.$on('$viewContentLoaded', function () {});
        }
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("newPicMeController", ['picMeAPI', '$rootScope', '$scope', '$window', newPicMeController]);

    function newPicMeController(picMeAPI, $rootScope, $scope, $window) {

        var vm = this;

        vm.getFilters = function () {
            console.log('getFilters');
            vm.picme.videoSensor.filters.random(vm.picme.videoSensor.element);
        };

        vm.savePicMe = function () {
            console.log('savePicMe');
            vm.picme.canvasSensor.element.width = vm.picme.videoSensor.element.videoWidth;
            vm.picme.canvasSensor.element.height = vm.picme.videoSensor.element.videoHeight;
            vm.picme.canvasSensor.element.getContext('2d').drawImage(vm.picme.videoSensor.element, 0, 0);

            vm.picme.imageSensor.image.title = new Date().toLocaleString() + ".png";
            vm.picme.imageSensor.image.contentType = 'image/png';
            vm.picme.imageSensor.image.content = vm.picme.canvasSensor.element.toDataURL('image/webp');

            picMeAPI.savePicMe({ user: vm.picme.imageSensor.user, image: vm.picme.imageSensor.image }).then(function (data) {
                console.log(data);
                //picMeAPI.downloadURL(vm.picme.imageSensor.image.content, `picMe.png`, 'image/png')
            }).catch(function (error) {
                console.log(error);
            });
        };

        vm.switchCam = function () {
            console.log('switchCam');
            vm.picme.videoSensor.front = !vm.picme.videoSensor.front;
            vm.picme.videoSensor.getStream();
        };

        vm.InitPicMe = function () {
            console.log('InitLoadImagePicMe');
            return {
                videoSensor: {
                    element: document.querySelector("#picMeCam"),
                    front: false,
                    stream: null,
                    filters: picMeAPI.getFilters(),
                    stopStream: function stopStream() {
                        if (this.stream) {
                            this.stream.getTracks().map(function (track) {
                                track.stop();
                            });
                        }
                    },
                    getStream: function getStream() {
                        var _this = this;

                        this.stopStream();

                        var mediaConfig = { audio: false, video: { facingMode: this.front ? "user" : "environment" } };
                        navigator.mediaDevices.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia || navigator.mediaDevices.oGetUserMedia;
                        navigator.mediaDevices.getUserMedia(mediaConfig).then(function (mediaStream) {
                            _this.stream = mediaStream;
                            _this.element.srcObject = _this.stream;
                        });
                    }
                },
                canvasSensor: {
                    element: document.querySelector("#picMeCanvas")
                },
                imageSensor: {
                    element: document.querySelector("#picMeImage"),
                    user: {
                        name: 'defaultUser',
                        email: 'default@email.com',
                        password: 'defaultPassword'
                    },
                    image: {
                        title: '',
                        contentType: '',
                        content: ''
                    }
                }
            };
        };

        (function initController() {
            console.log('newPicMe');
            $rootScope.showFooter = false;
            $rootScope.showHeader = false;
            vm.picme = vm.InitPicMe();
            vm.picme.videoSensor.getStream();
        })();

        // Clean up stuff
        $scope.$on('$destroy', function () {
            vm.picme.videoSensor.stopStream();
        });

        // Here your view content is fully loaded !!
        $scope.$on('$viewContentLoaded', function () {});
    }
})();
"use strict";

(function () {

	'use strict';

	// Factories are similars with Service and Providers.

	angular.module("ListaTelefonica").factory("picMeAPI", ['$http', 'config', picMeAPI]);

	function picMeAPI($http, config) {

		var _getPicsMe = function _getPicsMe() {
			return $http.get(config.oapiUrl + "/picMe").then(function (response) {
				return JSON.parse(JSON.stringify(response.data));
			}).catch(function (response) {
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível carregar os dados!');
			});
		};

		var _getPicMe = function _getPicMe(id) {
			return $http.get(config.oapiUrl + "/picMe/" + id).then(function (response) {
				return JSON.parse(JSON.stringify(response.data));
			}).catch(function (response) {
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível carregar os dados!');
			});
		};

		var _savePicMe = function _savePicMe(picMe) {
			return $http.post(config.oapiUrl + "/picMe", picMe).then(function (response) {
				//debugger;
				return JSON.parse(JSON.stringify(response.config.data));
			}).catch(function (response) {
				//debugger;
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível salvar os dados!');
			});
		};

		var _deletePicMe = function _deletePicMe(picMe) {
			return $http.delete(config.oapiUrl + "/picMe/" + picMe.id).then(function (response) {
				return JSON.parse(JSON.stringify(response.data));
			}).catch(function (response) {
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível deletar os dados!');
			});
		};

		var _createFilter = function _createFilter(name, config) {
			return {
				name: name,
				config: config,
				apply: function apply(element) {
					element.style.filter = name + "(" + config + ")";
				}
			};
		};

		var _getFilters = function _getFilters() {
			return {
				filterIndex: 0,
				options: [_createFilter('grayscale', '1'), _createFilter('sepia', '1'), _createFilter('blur', '5px'), _createFilter('brightness', '0.45'), _createFilter('contrast', '1'), _createFilter('hue-rotate', '90deg'), _createFilter('hue-rotate2', '1'), _createFilter('hue-rotate3', '1'), _createFilter('saturate', '4'), _createFilter('invert', '.8'), _createFilter('opacity', '.5'), _createFilter('none', '')],
				random: function random(element) {
					this.options[_randomNumber(0, this.options.length - 1)].apply(element);
				},
				next: function next(element) {
					this.options[this.filterIndex++ % this.options.length].apply(element);
				},
				previous: function previous(element) {
					this.options[this.filterIndex-- % this.options.length].apply(element);
				}
			};
		};

		var _randomNumber = function _randomNumber(min, max) {
			return Math.floor(Math.random() * max) + min;
		};

		var _downloadURL = function _downloadURL(values, name, type) {
			var downloadLink = document.createElement('a');
			downloadLink.href = values;
			downloadLink.target = '_blank';
			downloadLink.download = name;
			downloadLink.click();
		};

		var _downloadBlob = function _downloadBlob(values, name, type) {
			var blob = new Blob([values], { type: type });
			var url = URL.createObjectURL(blob);
			_downloadURL(url, name, type);
			URL.revokeObjectURL(blob);
		};

		return {
			getPicsMe: _getPicsMe,
			getPicMe: _getPicMe,
			savePicMe: _savePicMe,
			deletePicMe: _deletePicMe,
			createFilter: _createFilter,
			getFilters: _getFilters,
			randomNumber: _randomNumber,
			downloadURL: _downloadURL,
			downloadBlob: _downloadBlob
		};
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("PostItController", ['$rootScope', '$scope', '$window', PostItController]);

    function PostItController($rootScope, $scope, $window) {

        var vm = this;

        vm.listPostIts = function () {
            console.log(vm.file);

            $scope.$apply(function () {
                vm.file.content.map(function (questionario) {
                    var itensQuest = Object.entries(questionario);
                    itensQuest.map(function (itens) {
                        vm.postIts.push(Object.assign({}, { name: itensQuest[1][1], title: itens[0], description: itens[1] }));
                    });
                });
            });

            console.log(vm.postIts);
        };

        vm.printElement = function (elem) {
            console.log('testePrint');
            var mywindow = $window.open('', 'PRINT', 'height=600,width=800');

            var copyDocument = $window.document.documentElement;
            Array.from(copyDocument.getElementsByClassName('no-print')).map(function (item) {
                item.style.display = 'none';
            });

            setTimeout(function () {
                mywindow.document.write(copyDocument.innerHTML);
            }, 5000);
            setTimeout(function () {
                mywindow.document.close();
            }, 3000);
            setTimeout(function () {
                mywindow.focus();
            }, 5000);
            //setTimeout(() => { mywindow.print() }, 3000)
            //setTimeout(() => { mywindow.close() }, 3000)

            return true;
        };

        (function initController() {
            vm.editMode = false;
            vm.file = {};
            vm.postIts = [];
            vm.postIt = { id: null, name: '', title: '', description: '' };
        })();
    }
})();
"use strict";

(function () {

	'use strict';

	// Factories are similars with Service and Providers.

	angular.module("ListaTelefonica").factory("quickMenuAPI", ['$http', 'config', quickMenuAPI]);

	function quickMenuAPI($http, config) {

		var _getQuickMenus = function _getQuickMenus() {
			return $http.get(config.oapiUrl + "/quickMenu").then(function (response) {
				return JSON.parse(JSON.stringify(response.data));
			}).catch(function (response) {
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível carregar os dados!');
			});
		};

		var _getQuickMenu = function _getQuickMenu(id) {
			return $http.get(config.oapiUrl + "/quickMenu/" + id).then(function (response) {
				return JSON.parse(JSON.stringify(response.data));
			}).catch(function (response) {
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível carregar os dados!');
			});
		};

		var _saveQuickMenu = function _saveQuickMenu(quickMenu) {
			return $http.post(config.oapiUrl + "/quickMenu", quickMenu).then(function (response) {
				//debugger;
				return JSON.parse(JSON.stringify(response.config.data));
			}).catch(function (response) {
				//debugger;
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível salvar os dados!');
			});
		};

		var _deleteQuickMenu = function _deleteQuickMenu(quickMenu) {
			return $http.delete(config.oapiUrl + "/quickMenu/" + quickMenu.id).then(function (response) {
				return JSON.parse(JSON.stringify(response.data));
			}).catch(function (response) {
				console.log(response);
				throw Error('Aconteceu um problema: Não foi possível deletar os dados!');
			});
		};

		return {
			getQuickMenus: _getQuickMenus,
			getQuickMenu: _getQuickMenu,
			saveQuickMenu: _saveQuickMenu,
			deleteQuickMenu: _deleteQuickMenu
		};
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("QuickMenuController", ['quickMenuAPI', 'imageGenerator', 'IAGenerator', 'mobileNgMsg', '$rootScope', '$scope', '$window', QuickMenuController]);

    function QuickMenuController(quickMenuAPI, imageGenerator, IAGenerator, mobileNgMsg, $rootScope, $scope, $window) {

        var vm = this;

        vm.zoomQuickMenu = function ($event) {
            console.log($event.target);
            if ($event.target.style.transform == '') {
                $event.target.style.transform = 'scale(1.5)';
            } else {
                $event.target.style.transform = '';
            }
            console.log($event.target.style.transform);
        };

        vm.clearQuickMenu = function () {
            vm.menu.title = '';
            vm.menu.subTitle = '';
            vm.menu.image = {};
            imageGenerator.drawImage('newImage', '');
            vm.editMode = false;
        };

        vm.saveQuickMenu = function () {

            if (!!vm.menu.title && !!vm.menu.subTitle && !!vm.menu.image.content) {
                quickMenuAPI.saveQuickMenu(vm.menu).then(function (data) {
                    vm.menus.push(Object.assign({}, data));
                    mobileNgMsg.addSuccess('Menu Adicionado com Sucesso!');
                    vm.clearQuickMenu();
                });
            }
        };

        vm.listQuickMenu = function () {
            quickMenuAPI.getQuickMenus().then(function (data) {
                vm.menus = data;
            });
        };

        vm.InitLoadImageQuickMenu = function () {
            $rootScope.loading = true;
        };

        vm.FinishLoadImageQuickMenu = function () {

            var moderateConfig = { className: 'menu', probability: 0.97 };
            IAGenerator.moderateFromIA('newImage', moderateConfig).then(function (predictionsApproved) {
                $scope.$apply(function () {
                    vm.editMode = true;
                    $rootScope.loading = false;
                });
            }).catch(function (predictionsReproved) {
                mobileNgMsg.addError(predictionsReproved.Msg);
                mobileNgMsg.addError(predictionsReproved.Predictions);

                $scope.$apply(function () {
                    vm.clearQuickMenu();
                    $rootScope.loading = false;
                });
            });
        };

        (function initController() {
            vm.editMode = false;
            vm.listQuickMenu();
        })();
    }
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$httpProvider', httpConfig]);

	function httpConfig($httpProvider) {
		$httpProvider.defaults.cache = true;
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$httpProvider', interceptorConfig]);

	function interceptorConfig($httpProvider) {
		//console.log($httpProvider);
		//$httpProvider.interceptors.push("timeStampInterceptor");
		$httpProvider.interceptors.push("errorInterceptor");
		$httpProvider.interceptors.push("loadingInterceptor");
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$routeProvider', 'config', routeConfig]);

	function routeConfig($routeProvider, config) {

		$routeProvider.when("/:dirName*", {
			templateUrl: function templateUrl(urlattr) {
				return '/modules/' + urlattr.dirName + '.html';
			}
		}).otherwise({
			redirectTo: '/contatos/contatos'
		});
	}
})();
"use strict";

(function () {

	'use strict';

	// angular.module("ListaTelefonica").value("config", {
	// 	baseJsonUrl: "http://192.168.15.2:3000",
	// 	baseHtmlUrl: "http://192.168.15.2/angulartest"
	// });

	// Constants are similiars with values, but could be inject in Providers.

	angular.module("ListaTelefonica").constant("config", {
		appName: 'NPWA - NgProgressiveWebApp',
		template: { templateName: 'template-01' },
		templates: [{ templateName: 'template-01' }, { templateName: 'template-02' }, { templateName: 'template-03' }],
		version: '1.0',
		owner: 'Tiago Carmo Santos',
		year: '2018',
		site: 'https://br.linkedin.com/in/tiagocarmosantos',
		//apiUrl: 'http://localhost:3003/api',
		//oapiUrl: 'http://localhost:3003/oapi',
		apiUrl: 'https://microservice-sample.herokuapp.com/api',
		oapiUrl: 'https://microservice-sample.herokuapp.com/oapi',
		userKey: '_lista_telefonica_app_user'
	}).run(['$rootScope', 'config', function ($rootScope, config) {
		$rootScope.config = config;
		$rootScope.showHeader = true;
		$rootScope.showFooter = true;
	}]);
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").factory('errorInterceptor', ['$q', '$location', errorInterceptor]);

	function errorInterceptor($q, $location) {
		return {
			responseError: function responseError(rejection) {
				if (rejection.status == 404) {
					$location.path("/error");
				}

				if (rejection.status <= 0) {

					if (rejection.status == -1) {
						//console.log("Rejection Status: " + rejection.status);
						//console.log("Rejection URL: " + rejection.config.url);
						//console.log("Caches: " + caches);
						var deferred = $q.defer();
						caches.match(rejection.config.url).then(function (response) {
							//console.log("Cache Response: " + response);
							if (response) {
								response.json().then(function (json) {
									rejection.data = json;
									rejection.status = 200;
									deferred.resolve(rejection);
									//console.log("Resolve promise with ", rejection);
								});
								//console.log("deferred Reject: " + false);  
							} else {
								//console.log("deferred Reject: " + true);
								return deferred.reject(rejection);
							}
						});
						return deferred.promise;
					}
				}
				return $q.reject(rejection);
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").factory('loadingInterceptor', ['$q', '$rootScope', '$timeout', loadingInterceptor]);

	function loadingInterceptor($q, $rootScope, $timeout) {
		return {
			request: function request(config) {
				$rootScope.loading = true;
				return config;
			},
			requestError: function requestError(rejection) {
				$rootScope.loading = false;
				return $q.reject(rejection);
			},
			response: function response(_response) {
				$timeout(function () {
					$rootScope.loading = false;
				}, 500);
				return _response;
			},
			responseError: function responseError(rejection) {
				$rootScope.loading = false;
				return $q.reject(rejection);
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('timeStampInterceptor', [timeStampInterceptor]);

	function timeStampInterceptor() {
		return {
			request: function request(config) {
				var url = config.url;
				if (url.indexOf('view') > -1) return config;
				var timeStamp = new Date().getTime();
				config.url = url + "?timestamp=" + timeStamp;
				console.log(config.url);
				return config;
			}
		};
	}
})();